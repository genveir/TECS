using TECS.DataIntermediates.Builders;
using TECS.DataIntermediates.Chip;
using TECS.DataIntermediates.Test;

namespace TECS.Tests.FileAccess;

// ReSharper disable RedundantArgumentDefaultValue
internal static class HandMadeIntermediates
{
    public static TestData NotTestIntermediate => new TestDataBuilder()
        .WithChipToTest(NotIntermediate)
        .WithExpectedValues()
            .WithBinaryStringColumns("in", "out")
            .AddValueRow("0", "1")
            .AddValueRow("1", "0")
            .Build()
        .AddTest(0)
            .AddInput("in", false)
            .Build()
        .AddTest(1)
            .AddInput("in", true)
            .Build()
        .Build();

    public static ChipData NotIntermediate => new ChipDataBuilder()
        .WithName("Not")
        .AddInGroup("in", 1)
        .AddOutGroup("out", 1)
        .AddPart("Nand")
            .AddLink("a", "in")
            .AddLink("b", "in")
            .AddLink("out", "out")
            .Build()
        .Build();

    public static TestData AndTestIntermediate => new TestDataBuilder()
        .WithChipToTest(AndIntermediate)
        .WithExpectedValues()
            .WithBinaryStringColumns("a", "b", "out")
            .AddValueRow("0", "0", "0")
            .AddValueRow("0", "1", "0")
            .AddValueRow("1", "0", "0")
            .AddValueRow("1", "1", "1")
            .Build()
        .AddTest(0)
            .AddInput("a", false)
            .AddInput("b", false)
            .Build()
        .AddTest(1)
            .AddInput("a", false)
            .AddInput("b", true)
            .Build()
        .AddTest(2)
            .AddInput("a", true)
            .AddInput("b", false)
            .Build()
        .AddTest(3)
            .AddInput("a", true)
            .AddInput("b", true)
            .Build()
        .Build();

    public static ChipData AndIntermediate => new ChipDataBuilder()
        .WithName("And")
        .AddInGroup("a", 1)
        .AddInGroup("b", 1)
        .AddOutGroup("out", 1)
        .AddPart("Nand")
            .AddLink("a", "a")
            .AddLink("b", "b")
            .AddLink("out", "mid")
            .Build()
        .AddPart("Not")
            .AddLink("in", "mid")
            .AddLink("out", "out")
            .Build()
        .Build();

    public static ChipData WeirdNotIntermediate => new ChipDataBuilder()
        .WithName("NotWeird")
        .AddInGroup("in", 1)
        .AddOutGroup("out", 1)
        .AddOutGroup("out2", 1)
        .AddPart("Nand")
            .AddLink("a", "in")
            .AddLink("b", "in")
            .AddLink("out", "out")
            .AddLink("out", "out2")
            .Build()
        .Build();

    public static TestData And16TestIntermediate => new TestDataBuilder()
        .WithChipToTest(And16Intermediate)
        .WithExpectedValues()
        .WithBinaryStringColumns("a", "b", "out")
            .AddValueRow("0000000000000000", "0000000000000000", "0000000000000000")
            .AddValueRow("0000000000000000", "1111111111111111", "0000000000000000")
            .AddValueRow("1111111111111111", "1111111111111111", "1111111111111111")
            .AddValueRow("1010101010101010", "0101010101010101", "0000000000000000")
            .AddValueRow("0011110011000011", "0000111111110000", "0000110011000000")
            .AddValueRow("0001001000110100", "1001100001110110", "0001000000110100")
            .Build()
        .AddTest(0)
            .AddInput("a", "%B0000000000000000", 16)
            .AddInput("b", "%B0000000000000000", 16)
            .Build()
        .AddTest(1)
            .AddInput("a", "%B0000000000000000", 16)
            .AddInput("b", "%B1111111111111111", 16)
            .Build()
        .AddTest(2)
            .AddInput("a", "%B1111111111111111", 16)
            .AddInput("b", "%B1111111111111111", 16)
            .Build()
        .AddTest(3)
            .AddInput("a", "%B1010101010101010", 16)
            .AddInput("b", "%B0101010101010101", 16)
            .Build()
        .AddTest(4)
            .AddInput("a", "%B0011110011000011", 16)
            .AddInput("b", "%B0000111111110000", 16)
            .Build()
        .AddTest(5)
            .AddInput("a", "%B0001001000110100", 16)
            .AddInput("b", "%B1001100001110110", 16)
            .Build()
        .Build();

    public static ChipData And16Intermediate
    {
        get
        {
            var builder = new ChipDataBuilder()
                .WithName("And16")
                .AddInGroup("a", 16)
                .AddInGroup("b", 16)
                .AddOutGroup("out", 16);

            for (int n = 0; n < 16; n++)
            {
                builder.AddPart("And")
                    .AddLink()
                        .WithInternal("a")
                        .WithExternal("a", n, n)
                        .Build()
                    .AddLink()
                        .WithInternal("b")
                        .WithExternal("b", n, n)
                        .Build()
                    .AddLink()
                        .WithInternal("out")
                        .WithExternal("out", n, n)
                        .Build()
                    .Build();
            }

            return builder.Build();
        }
    }

    public static ChipData LinkTestIntermediate =>new ChipDataBuilder()
        .WithName("LinkTest")
        .AddInGroup("a", 16)
        .AddOutGroup("out", 16)
        .AddPart("Simple")
            .AddLink()
        .WithInternal("in", null, null)
                .WithExternal("a", null, null)
                .Build()
            .AddLink()
                .WithInternal("ex", null, null)
                .WithExternal("out", null, null)
                .Build()
            .Build()
        .AddPart("SpecifiedPin")
            .AddLink()
                .WithInternal("in", 1, 1)
                .WithExternal("a", 5,5)
                .Build()
            .AddLink()
                .WithInternal("ex", 10, 10)
                .WithExternal("out", 5, 5)
                .Build()
            .Build()
        .AddPart("SpecifiedRange")
            .AddLink()
                .WithInternal("in", 1, 5)
                .WithExternal("a", 5, 9)
                .Build()
            .AddLink()
                .WithInternal("ex", 3, 10)
                .WithExternal("out", 5, 12)
                .Build()
            .Build()
        .AddPart("TrueFalse")
            .AddLink()
                .WithInternal("q", null, null)
                .WithExternal("true", null, null)
                .Build()
            .AddLink()
                .WithInternal("p", 0, 2)
                .WithExternal("false", null, null)
                .Build()
            .AddLink()
                .WithInternal("ex", null, null)
                .WithExternal("out", null, null)
                .Build()
            .Build()
        .Build();

    public static ChipData LatchTestIntermediate => new ChipDataBuilder()
        .WithName("Latch")
        .AddInGroup("s", 1)
        .AddInGroup("r", 1)
        .AddOutGroup("out", 1)
        .AddNand("s", "n1", "n0")
        .AddNand("n0", "r", "n1")
        .AddPass("n0", "out")
        .Build();
        

    private static ChipDataBuilder AddNand(this ChipDataBuilder chipDataBuilder, string aExternal, string bExternal, string outExternal)
    {
        return chipDataBuilder.AddPart("Nand")
            .AddLink()
                .WithInternal("a")
                .WithExternal(aExternal)
                .Build()
            .AddLink()
                .WithInternal("b")
                .WithExternal(bExternal)
                .Build()
            .AddLink()
                .WithInternal("out")
                .WithExternal(outExternal)
                .Build()
            .Build();
    }

    private static ChipDataBuilder AddPass(this ChipDataBuilder chipDataBuilder, string inExternal, string outExternal)
    {
        return chipDataBuilder.AddPart("Pass")
            .AddLink()
                .WithInternal("in")
                .WithExternal(inExternal)
                .Build()
            .AddLink()
                .WithInternal("out")
                .WithExternal(outExternal)
                .Build()
            .Build();
    }
}